{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_64_0/boost/math/special_functions/factorials.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006, 2010.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/math-base-assert-is-integer' );\nvar isnan = require( '@stdlib/math-base-assert-is-nan' );\nvar gammaDeltaRatio = require( '@stdlib/math-base-special-gamma-delta-ratio' );\nvar fallingFactorial = require( '@stdlib/math-base-special-falling-factorial' );\n\n\n// MAIN //\n\n/**\n* Computes the rising factorial of `x` and `n`.\n*\n* ## Notes\n*\n* -   The rising factorial is defined as\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = x (x-1) (x-2) (x-3) \\ldots (x-n+1)\n*     ```\n*\n*     or equivalently\n*\n*     ```tex\n*     \\operatorname{risingFactorial}(x, n) = \\frac{ \\Gamma(x + n) }{ \\Gamma(x) };\n*     ```\n*\n* @param {number} x - first function parameter\n* @param {integer} n - second function parameter\n* @returns {number} function value\n*\n* @example\n* var v = risingFactorial( 0.9, 5 );\n* // returns ~94.766\n*\n* @example\n* var v = risingFactorial( -9.0, 3 );\n* // returns -504.0\n*\n* @example\n* var v = risingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* @example\n* var v = risingFactorial( 3.0, -2 );\n* // returns 0.5\n*/\nfunction risingFactorial( x, n ) {\n\tvar result;\n\tvar inv;\n\n\tif ( isnan( x ) || !isInteger( n ) ) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\t// For `x < 0`, we really have a falling factorial, modulo a possible change of sign. Note that the falling factorial isn't defined for negative `n`, so we'll get rid of that case first:\n\t\tif ( n < 0.0 ) {\n\t\t\tx += n;\n\t\t\tn = -n;\n\t\t\tinv = true;\n\t\t}\n\t\tresult = ( (n&1) ? -1.0 : 1.0 ) * fallingFactorial( -x, n );\n\t\tif ( inv ) {\n\t\t\tresult = 1.0 / result;\n\t\t}\n\t\treturn result;\n\t}\n\tif ( n === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x === 0.0 ) {\n\t\tif ( n < 0 ) {\n\t\t\treturn -gammaDeltaRatio( x+1.0, -n );\n\t\t}\n\t\treturn 0.0;\n\t}\n\tif ( x < 1.0 && x+n < 0.0 ) {\n\t\tresult = gammaDeltaRatio( 1.0-x, -n );\n\t\treturn ( n&1 ) ? -result : result;\n\t}\n\t// We don't optimize this for small `n`, because `gammaDeltaRatio` is already optimized for that use case:\n\treturn 1.0 / gammaDeltaRatio( x, n );\n}\n\n\n// EXPORTS //\n\nmodule.exports = risingFactorial;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the rising factorial.\n*\n* @module @stdlib/math-base-special-rising-factorial\n*\n* @example\n* var risingFactorial = require( '@stdlib/math-base-special-rising-factorial' );\n*\n* var v = risingFactorial( 0.9, 5 );\n* // returns ~94.766\n*\n* v = risingFactorial( -9.0, 3 );\n* // returns -504.0\n*\n* v = risingFactorial( 0.0, 2 );\n* // returns 0.0\n*\n* v = risingFactorial( 3.0, -2 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAmCA,IAAIC,EAAY,QAAS,qCAAsC,EAC3DC,EAAQ,QAAS,iCAAkC,EACnDC,EAAkB,QAAS,6CAA8C,EACzEC,EAAmB,QAAS,6CAA8C,EA0C9E,SAASC,EAAiBC,EAAGC,EAAI,CAChC,IAAIC,EACAC,EAEJ,OAAKP,EAAOI,CAAE,GAAK,CAACL,EAAWM,CAAE,EACzB,IAEHD,EAAI,GAEHC,EAAI,IACRD,GAAKC,EACLA,EAAI,CAACA,EACLE,EAAM,IAEPD,GAAYD,EAAE,EAAK,GAAO,GAAQH,EAAkB,CAACE,EAAGC,CAAE,EACrDE,IACJD,EAAS,EAAMA,GAETA,GAEHD,IAAM,EACH,EAEHD,IAAM,EACLC,EAAI,EACD,CAACJ,EAAiBG,EAAE,EAAK,CAACC,CAAE,EAE7B,EAEHD,EAAI,GAAOA,EAAEC,EAAI,GACrBC,EAASL,EAAiB,EAAIG,EAAG,CAACC,CAAE,EAC3BA,EAAE,EAAM,CAACC,EAASA,GAGrB,EAAML,EAAiBG,EAAGC,CAAE,CACpC,CAKAP,EAAO,QAAUK,IC7EjB,IAAIK,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isInteger", "isnan", "gammaDeltaRatio", "fallingFactorial", "risingFactorial", "x", "n", "result", "inv", "main"]
}
